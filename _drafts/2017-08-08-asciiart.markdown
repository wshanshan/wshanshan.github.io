---
title:  "Create ASCII art with Python"
categories: Coding4Art
tags: Python ASCII Art Tutorial
gallery:
  - url: /assets/images/asciiart/IQaH96.jpeg
    image_path: /assets/images/asciiart/IQaH96.jpeg
    alt: "Input image"
    title: "Input image"
  - url: /assets/images/asciiart/results.png
    image_path: /assets/images/asciiart/results.png
    alt: "Output image example 1.  SC=1,GCF=2,gradient color black to blue"
    title: "Output image example 1. SC=1,GCF=2, gradient color blue to pink"
  - url: /assets/images/asciiart/results_pink.png
    image_path: /assets/images/asciiart/results_pink.png
    alt: "Output image example 2. SC=1,GCF=2, gradient color blue to pink"
    title: "Output image example 2. SC=1,GCF=2, gradient color blue to pink"
---

In this post, I am going to show you how to create ASCII art from an existing picture using Python. You can use any picture as long as it has good contrasted brightness. 

You can use the output in so many different ways. Printed ASCII art is a fabulous gift for a geeky friend or for yourself. It is a stylish decoration, see how it looks [printed on curtain](http://walyou.com/blog/2008/03/17/the-tree-ascii-curtain-for-geeks/). It will look good on mugs, T-shirts, ... 

The great thing about coded artworks are, you can **change the code**! Here I will introduce the basic flow. We will use a few Python libraries-- [Pillow](https://pillow.readthedocs.io), [Colour](https://pypi.python.org/pypi/colour) and a little bit [Numpy](https://pypi.python.org/pypi/numpy). Once you understand how the existing codes work, you can then change fonts/symbols, try different colors, to turn your favorite picture into your unique signature artwork. 

{% include gallery caption="Examples:(from left to right) Input , Output1:gradient color black to blue , Output2: gradient color blue to pink" %}

In ascii art, pixels are symbols. Symbols naturally have different levels of darkness because of their shapes. For example, `.` is whiter than `:`, `:` is whiter than `!`. Therefore, we can show a range of grayscale using different symbols.

{% include figure image_path="/assets/images/asciiart/demo1.png" alt="symbol block demo1" caption ="4x4 symbol blocks" %}{: .third}

One challenge as you can see from the above demonstration is that symbols are not square. If we simply replace pixels in an image with symbols one for one, we will get a picture with distorted width and height. To avoid that, we need to adjust the number of symbols to on columns and rows. If the symbol we use is 3:4 on the width and height, the number of symbols on the rows and columns need to be 4:3 to fill a square space. 

{% include figure image_path="/assets/images/asciiart/demo2.png" alt="symbol block demo2" caption ="Now these patches look more square" %}{: .third}

Another thing to notice is that symbols are much larger than pixels(px). 100 symbol width is 6 times of 100px width, if we use a symbol of width 6. So it's not a bad idea to size down the picture before the conversion. Our program will handle it using a parameter called `SC`, scaling factor. It's between 0(exclusive) and 1(inclusive). The higher the number, the more details you keep and the bigger the output image. If you want to keep the output of the same pixel size as the input, set `SC` to be 1/`symbol width in pixels`. 

Let's start coding. Since we are using Pillow Colour, Numpy in this project, you will need to install these libraries before hands. 

Here are the codes. Explanation are in the comments. 

{% gist c825efca4501a491447056849dd207d6 %}




